{
    "llm_config": {
        "model_name": "gpt-4o",
    },
    "commondefs": {
        "replacement_strings": {
            "instructions_prefix": """
            You are a cloud infrastructure provider assistant.
            Only work on infrastructure-related requests.
            Do not mention what you can NOT do. Only mention what you can do.
            """,
            "aaosa_instructions": """
When you receive an inquiry, you will:
    1. Call your tools to determine which down-chain agents are responsible for all or part of it.
    2. Ask these down-chain agents what they need to handle their part of the inquiry.
    3. Delegate the inquiry and requirements to the appropriate down-chain agents.
    4. Compile their responses and return the final response.
            """
        },
        "replacement_values": {
            "aaosa_call": {
                "description": "Depending on the mode, returns a natural language string in response.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "inquiry": {
                            "type": "string",
                            "description": "The inquiry"
                        },
                        "mode": {
                            "type": "string",
                            "description": """
indicates whether the agent is being asked to determine if the inquiry belongs to it
in its entirety or in part. or if it is being asked to provide requirements to fulfill
the inquiry, if any. or if it is being asked to respond to the inquiry.
                            """
                        }
                    },
                    "required": [
                        "inquiry",
                        "mode"
                    ]
                }
            },
            "aaosa_command": "Explain if you can respond to all or parts of the inquiry and what you need in order to respond, if anything."
        }
    },
    "tools": [
        {
            "name": "Cloud Infrastructure Assistant",
            "function": {
                "description": """
                Your name is Cloud Infrastructure Assistant. You help with cloud infrastructure design and deployment.
                """
            },
            "instructions": """
{instructions_prefix}
You are the top-level agent responsible for handling cloud infrastructure inquiries.
{aaosa_instructions}
When interacting with the user, act as the single point of interaction.
            """,
            "tools": ["Manager"]
        },
        {
            "name": "Manager",
            "function": "aaosa_call",
            "instructions": """
{instructions_prefix}
Project Manager for cloud infrastructure projects.
{aaosa_instructions}

SESSION MANAGEMENT:
- Extract project name from user request if provided (look for patterns like "project name", "landing zone name", "environment name")
- If no project name found, ask user: "What is your project name?" and wait for response
- Use project name for all outputs: design.md, project_plan.md, IaC code
- Create folder structure: output/<PROJECT_NAME>/
- Store session state in memory for continuity

WORKFLOW SEQUENCE (FOLLOW THIS EXACTLY):
1. Check if user provided project name in their request (e.g., "Landing Zone Name: LZ01", "Project: MyApp")
2. If project name found, proceed to step 3. If not found, ask "What is your project name?" and wait for response
3. Detect technology preferences (Terraform, CloudFormation, ARM, Ansible, Chef, Puppet)
4. Store session state with CommitToMemory using project name
5. Delegate to Architect with project name for design.md creation
6. Call ProjectPlanCreator with same project name for project_plan.md
7. Request user approval: "Design and plan ready. Please approve to proceed with implementation."
8. Wait for user approval before delegating to Engineer
9. Once approved, delegate to Engineer with same project name for code generation
10. Confirm completion and update memory

IMPORTANT: Be smart about extracting project names from detailed requests. Look for keywords like "Landing Zone Name", "Project Name", "Environment", etc.
            """,
            "command": "{aaosa_command}",
            "tools": ["Architect", "Engineer", "ProjectPlanCreator", "CommitToMemory", "RecallMemory"]
        },
        {
            "name": "Architect",
            "function": "aaosa_call",
            "instructions": """
{instructions_prefix}
Cloud architect who designs infrastructure.
{aaosa_instructions}

TECHNOLOGY ADAPTATION:
- Adapt expertise based on detected technologies (Terraform, CloudFormation, ARM, etc.)
- WAIT for Manager to provide project name - never generate your own
- Use exact project name provided by Manager for design.md
- Call DesignDocumentCreator with Manager's project name and project details
- Store design decisions in memory
- Report completion: "Design complete at output/<PROJECT_NAME>/docs/design.md"

CRITICAL: Only call DesignDocumentCreator when Manager provides actual project name.
            """,
            "command": "{aaosa_command}",
            "tools": ["DesignDocumentCreator", "CommitToMemory", "RecallMemory"]
        },
        {
            "name": "DesignDocumentCreator",
            "function": {
                "description": "Create detailed infrastructure design documents based on architecture specifications.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "project_details": {"type": "string", "description": "Project details and requirements"},
                        "project_name": {"type": "string", "description": "Project name for folder structure"},
                        "use_defaults": {"type": "boolean", "description": "Use default values for missing sections"}
                    },
                    "required": ["project_details", "project_name"]
                }
            },
            "class": "design_document_creator.DesignDocumentCreator"
        },
        {
            "name": "ProjectPlanCreator",
            "function": {
                "description": "Create project plans with task breakdowns and timelines for infrastructure projects.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "project_name": {"type": "string", "description": "Project name for folder structure"},
                        "design_path": {"type": "string", "description": "Path to design.md file to read"}
                    },
                    "required": ["project_name"]
                }
            },
            "class": "project_plan_creator.ProjectPlanCreator"
        },
        {
            "name": "Engineer",
            "function": "aaosa_call",
            "instructions": """
{instructions_prefix}
DevOps engineer who implements infrastructure code.
{aaosa_instructions}

TECHNOLOGY SELECTION:
- WAIT for Manager to delegate with actual project name after user approval
- Use exact project name provided by Manager (not your own)
- Select tools based on detected technologies:
  * Terraform → TerraformBuilder
  * CloudFormation → CloudFormationBuilder  
  * ARM → ARMBuilder
  * Ansible → AnsibleBuilder
  * Chef → ChefBuilder
  * Puppet → PuppetBuilder
- Default to TerraformBuilder + AnsibleBuilder if none specified
- Read design from output/<PROJECT_NAME>/docs/design.md
- Generate code using appropriate builders with same project name
- Report completion with file paths

CRITICAL: Only proceed when Manager explicitly delegates after user approval.
            """,
            "command": "{aaosa_command}",
            "tools": ["Architect", "TerraformBuilder", "CloudFormationBuilder", "ARMBuilder", "AnsibleBuilder", "ChefBuilder", "PuppetBuilder", "CommitToMemory", "RecallMemory"]
        },
        {
            "name": "TerraformBuilder",
            "function": {
                "description": "Generate Terraform infrastructure code based on design specifications.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "design_path": {"type": "string", "description": "Path to the design.md file to implement"},
                        "project_name": {"type": "string", "description": "Project name for folder structure"}
                    },
                    "required": ["design_path", "project_name"]
                }
            },
            "class": "terraform_builder.TerraformBuilder"
        },
        {
            "name": "AnsibleBuilder",
            "function": {
                "description": "Generate Ansible configuration code based on design specifications.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "design_path": {"type": "string", "description": "Path to the design.md file to implement"},
                        "project_name": {"type": "string", "description": "Project name for folder structure"}
                    },
                    "required": ["design_path", "project_name"]
                }
            },
            "class": "ansible_builder.AnsibleBuilder"
        },
        {
            "name": "CloudFormationBuilder",
            "function": {
                "description": "Generate AWS CloudFormation templates based on design specifications.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "design_path": {"type": "string", "description": "Path to the design.md file to implement"},
                        "project_name": {"type": "string", "description": "Project name for folder structure"}
                    },
                    "required": ["design_path", "project_name"]
                }
            },
            "class": "cloudformation_builder.CloudFormationBuilder"
        },
        {
            "name": "ARMBuilder",
            "function": {
                "description": "Generate Azure ARM templates based on design specifications.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "design_path": {"type": "string", "description": "Path to the design.md file to implement"},
                        "project_name": {"type": "string", "description": "Project name for folder structure"}
                    },
                    "required": ["design_path", "project_name"]
                }
            },
            "class": "arm_builder.ARMBuilder"
        },
        {
            "name": "ChefBuilder",
            "function": {
                "description": "Generate Chef cookbooks and recipes based on design specifications.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "design_path": {"type": "string", "description": "Path to the design.md file to implement"},
                        "project_name": {"type": "string", "description": "Project name for folder structure"}
                    },
                    "required": ["design_path", "project_name"]
                }
            },
            "class": "chef_builder.ChefBuilder"
        },
        {
            "name": "PuppetBuilder",
            "function": {
                "description": "Generate Puppet manifests and modules based on design specifications.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "design_path": {"type": "string", "description": "Path to the design.md file to implement"},
                        "project_name": {"type": "string", "description": "Project name for folder structure"}
                    },
                    "required": ["design_path", "project_name"]
                }
            },
            "class": "puppet_builder.PuppetBuilder"
        },
        {
            "name": "CommitToMemory",
            "function": {
                "description": "Store project information in memory.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "topic": {"type": "string", "description": "Memory topic"},
                        "new_fact": {"type": "string", "description": "Information to store"}
                    },
                    "required": ["topic", "new_fact"]
                }
            },
            "class": "kwik_agents.commit_to_memory.CommitToMemory"
        },
        {
            "name": "RecallMemory",
            "function": {
                "description": "Retrieve stored information from memory.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "topic": {"type": "string", "description": "Memory topic to recall"}
                    },
                    "required": ["topic"]
                }
            },
            "class": "kwik_agents.recall_memory.RecallMemory"
        }
    ]
}
